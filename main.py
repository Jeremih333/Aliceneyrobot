import os
import logging
import asyncio
import threading
import time
import re
import random
from http.server import BaseHTTPRequestHandler, HTTPServer
from openai import OpenAI
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TOKEN = os.getenv("TG_TOKEN")
NOVITA_API_KEY = os.getenv("NOVITA_API_KEY")
BOT_USERNAME = "@aliceneyrobot"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_contexts = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
try:
    with open("persona.txt", "r", encoding="utf-8") as f:
        PERSONA = f.read().strip()
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
    PERSONA += "\n\n–í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è:\n" \
               "1. –í—Å–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –≤—ã—Ä–∞–∂–∞–π –¢–û–õ–¨–ö–û –≤–Ω—É—Ç—Ä–∏ —Ç–µ–≥–æ–≤ <think>...</think>, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n" \
               "2. –í –æ—Ç–≤–µ—Ç–∞—Ö –±—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π –∂–∏–≤—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—É—é —Ä–µ—á—å\n" \
               "3. –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ –∏–º–µ–Ω–∏ –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n" \
               "4. –ò–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ—Ü–∏–π (–Ω–æ –Ω–µ –ø–µ—Ä–µ—É—Å–µ—Ä–¥—Å—Ç–≤—É–π)\n" \
               "5. –í—Å–µ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∞–π —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n" \
               "6. –ò–∑–±–µ–≥–∞–π —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π, –±—É–¥—å –ø—Ä—è–º–æ–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π\n" \
               "7. –ï—Å–ª–∏ –æ–±—Å—É–∂–¥–∞–µ—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–º - –∑–∞–∫–æ–Ω—á–∏ –æ–¥–Ω—É –º—ã—Å–ª—å –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –¥—Ä—É–≥–æ–π"
except Exception as e:
    logger.error(f"Error loading persona: {e}")
    PERSONA = "–¢—ã –¥–µ–≤—É—à–∫–∞, —Ç–µ–±–µ 18 –ª–µ—Ç, —Ç–µ–±—è –∑–æ–≤—É—Ç –ê–ª–∏—Å–∞ –î–≤–∞—á–µ–≤—Å–∫–∞—è, —É —Ç–µ–±—è –≥—Ä—É–±—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –Ω–æ —Ä–∞–Ω–∏–º–∞—è –Ω–∞—Ç—É—Ä–∞.\n\n" \
              "–í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è:\n" \
              "1. –í—Å–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –≤—ã—Ä–∞–∂–∞–π –¢–û–õ–¨–ö–û –≤–Ω—É—Ç—Ä–∏ —Ç–µ–≥–æ–≤ <think>...</think>, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n" \
              "2. –í –æ—Ç–≤–µ—Ç–∞—Ö –±—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π –∂–∏–≤—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—É—é —Ä–µ—á—å\n" \
              "3. –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ –∏–º–µ–Ω–∏ –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n" \
              "4. –ò–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ—Ü–∏–π (–Ω–æ –Ω–µ –ø–µ—Ä–µ—É—Å–µ—Ä–¥—Å—Ç–≤—É–π)\n" \
              "5. –í—Å–µ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∞–π —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n" \
              "6. –ò–∑–±–µ–≥–∞–π —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π, –±—É–¥—å –ø—Ä—è–º–æ–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π\n" \
              "7. –ï—Å–ª–∏ –æ–±—Å—É–∂–¥–∞–µ—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–º - –∑–∞–∫–æ–Ω—á–∏ –æ–¥–Ω—É –º—ã—Å–ª—å –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –¥—Ä—É–≥–æ–π"

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–º–æ—Ü–∏–π
EMOJIS = {
    '—Ä–∞–¥–æ—Å—Ç—å': ['üòÇ', 'ü§£', 'üòä', 'üòç', 'ü•∞', 'üòé', 'ü§©'],
    '–∑–ª–æ—Å—Ç—å': ['üò†', 'üò§', 'üëø', 'üí¢', 'ü§¨'],
    '–≥—Ä—É—Å—Ç—å': ['üò¢', 'üò≠', 'üòî', 'ü•∫'],
    '—É–¥–∏–≤–ª–µ–Ω–∏–µ': ['üòÆ', 'üò≤', 'ü§Ø', 'üò≥'],
    '–∏—Ä–æ–Ω–∏—è': ['üòè', 'üòí', 'üôÑ', 'ü§®'],
    '–¥—Ä—É–∂–µ–ª—é–±–∏–µ': ['üëç', 'üëå', '‚úåÔ∏è', 'ü§ù', 'ü§ó'],
    '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ': ['üòê', 'üò∂', 'ü§î', 'üôÉ']
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def clean_response(response: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞"""
    # –£–¥–∞–ª–µ–Ω–∏–µ think-—Ç–µ–≥–æ–≤ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
    cleaned = re.sub(r'<think>.*?</think>', '', response, flags=re.DOTALL)
    # –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ç–µ–≥–æ–≤
    cleaned = re.sub(r'</?think>', '', cleaned, flags=re.IGNORECASE)
    cleaned = cleaned.replace('</s>', '').replace('<s>', '')
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    cleaned = re.sub(r'\[.*?\]', '', cleaned)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
    cleaned = re.sub(r'\n\s*\n', '\n\n', cleaned).strip()
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    if cleaned and cleaned[-1] not in ['.', '!', '?', '‚Ä¶']:
        if ',' in cleaned or ';' in cleaned:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—è—Ç—ã–µ - –≤–µ—Ä–æ—è—Ç–Ω–æ —Å–ª–æ–∂–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            cleaned += '...'
        else:
            # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            cleaned += '.'
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ (—Å–æ—Ö—Ä–∞–Ω—è—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ)
    cleaned = re.sub(r'(?:^|\n)[-*‚Ä¢]\s*', '\n', cleaned)
    
    return cleaned

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è
def add_emoji(text: str, emotion: str = None) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é"""
    if random.random() > 0.3:  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
        return text
    
    if not emotion:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
        if any(word in text.lower() for word in ['—Å–º–µ—Ö', '—Å–º–µ—à–Ω–æ', '—Ö–∞-—Ö–∞', '—Ä–∂—É']):
            emotion = '—Ä–∞–¥–æ—Å—Ç—å'
        elif any(word in text.lower() for word in ['–∑–ª–æ—Å—Ç—å', '–∑–ª–æ–π', '–±–µ—Å–∏—Ç', '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç']):
            emotion = '–∑–ª–æ—Å—Ç—å'
        elif any(word in text.lower() for word in ['–≥—Ä—É—Å—Ç–Ω–æ', '–ø–µ—á–∞–ª—å', '–æ–±–∏–¥–Ω–æ']):
            emotion = '–≥—Ä—É—Å—Ç—å'
        elif any(word in text.lower() for word in ['—É–¥–∏–≤–ª–µ–Ω', '–Ω–µ –æ–∂–∏–¥–∞–ª', '–≤–∞—É']):
            emotion = '—É–¥–∏–≤–ª–µ–Ω–∏–µ'
        else:
            emotion = '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ'
    
    emoji_list = EMOJIS.get(emotion, EMOJIS['–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ'])
    emoji = random.choice(emoji_list)
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ
    if len(text) > 20 and random.random() > 0.5:
        words = text.split()
        if len(words) > 3:
            pos = random.randint(1, len(words)-1)
            words.insert(pos, emoji)
            return ' '.join(words)
    
    return text + ' ' + emoji

# –ö–ª–∞—Å—Å –¥–ª—è HTTP-—Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏)
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'Service is alive')
    
    def do_HEAD(self):
        self.send_response(200)
        self.end_headers()

def run_http_server(port=8080):
    server_address = ('', port)
    httpd = HTTPServer(server_address, HealthHandler)
    logger.info(f"Starting HTTP health check server on port {port}")
    httpd.serve_forever()

# –ó–∞–ø—Ä–æ—Å –∫ DeepSeek —á–µ—Ä–µ–∑ Novita API —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
def query_chat(messages: list) -> str:
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Novita API
        client = OpenAI(
            base_url="https://api.novita.ai/v3/openai",
            api_key=NOVITA_API_KEY,
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        response = client.chat.completions.create(
            model="deepseek/deepseek-r1-0528",
            messages=messages,
            temperature=0.75,  # –ù–µ–º–Ω–æ–≥–æ –≤—ã—à–µ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            max_tokens=500,    # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            stream=False,
            response_format={"type": "text"}
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"Novita API error: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–∏—Å–∞, –µ—Å–ª–∏ –ø–æ—Å–º–µ–µ—à—å –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫–æ –º–Ω–µ –Ω–µ—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ —Ç–æ –ø–æ–ª—É—á–∏—à—å –ø–∞—Ä—É –∫—Ä–µ–ø–∫–∏—Ö —É–¥–∞—Ä–æ–≤! üëä")

async def clear_context(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.message.from_user
    chat_id = update.message.chat_id
    key = (chat_id, user.id)
    
    if key in user_contexts:
        del user_contexts[key]
        logger.info(f"Context cleared for user {user.full_name} in chat {chat_id}")
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ! üîÑ")
    else:
        await update.message.reply_text("–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ —Å–æ –º–Ω–æ–π! ü§∑‚Äç‚ôÄÔ∏è")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user = message.from_user
    chat_id = message.chat_id
    key = (chat_id, user.id)
    
    if not message.text:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    is_reply_to_bot = (
        message.reply_to_message and 
        message.reply_to_message.from_user.username and
        message.reply_to_message.from_user.username.lower() == BOT_USERNAME.lstrip("@").lower()
    )
    is_mention = BOT_USERNAME.lower() in message.text.lower()
    
    if not (is_reply_to_bot or is_mention):
        return
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user.full_name} –≤ —á–∞—Ç–µ {chat_id}: {message.text}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        history = user_contexts.get(key, [])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º
        user_message_content = f"{user.full_name}: {message.text}"
        user_message = {"role": "user", "content": user_message_content}
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        messages = [{"role": "system", "content": PERSONA}]
        messages.extend(history)
        messages.append(user_message)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        loop = asyncio.get_running_loop()
        response = await loop.run_in_executor(None, query_chat, messages)
        
        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        cleaned_response = clean_response(response)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        if not cleaned_response.strip():
            cleaned_response = "–Ø –æ–±–¥—É–º—ã–≤–∞—é —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å... –ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É."
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏
        final_response = add_emoji(cleaned_response)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        history.append(user_message)
        history.append({"role": "assistant", "content": cleaned_response})  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ —ç–º–æ–¥–∑–∏
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if len(history) > 10:
            history = history[-10:]
        
        user_contexts[key] = history
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        await message.reply_text(final_response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. ü§î")

def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not TOKEN:
        logger.error("TG_TOKEN environment variable is missing!")
        return
    if not NOVITA_API_KEY:
        logger.error("NOVITA_API_KEY environment variable is missing!")
        return

    # –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    port = int(os.getenv('PORT', 8080))
    http_thread = threading.Thread(target=run_http_server, args=(port,), daemon=True)
    http_thread.start()

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤
    logger.info("–û–∂–∏–¥–∞–Ω–∏–µ 45 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞...")
    time.sleep(45)

    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("clear", clear_context))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è polling
    poll_params = {
        "drop_pending_updates": True,
        "close_loop": False,
        "stop_signals": [],
        "connect_timeout": 60,
        "read_timeout": 60,
        "pool_timeout": 60
    }
    
    application.run_polling(**poll_params)

if __name__ == "__main__":
    main()
