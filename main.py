import os
import logging
import asyncio
import threading
import time
import re
import random
from datetime import datetime, timedelta
from http.server import BaseHTTPRequestHandler, HTTPServer
from openai import OpenAI
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TOKEN = os.getenv("TG_TOKEN")
NOVITA_API_KEY = os.getenv("NOVITA_API_KEY")
BOT_USERNAME = "@aliceneyrobot"

# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
UNLIMITED_CHAT_ID = -1001481824277

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_contexts = {}
daily_message_counters = {}  # –§–æ—Ä–º–∞—Ç: {(user_id, date): count}
last_cleanup_time = time.time()

# –°–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
EMOJI_LIST = ["üòä", "üòÇ", "üòç", "ü§î", "üòé", "üëç", "‚ù§Ô∏è", "‚ú®", "üéâ", "üíî"]

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
try:
    with open("persona.txt", "r", encoding="utf-8") as f:
        PERSONA = f.read().strip()
    PERSONA += "\n\n–¢—ã –æ–±—â–∞–µ—à—å—Å—è –≤ —á–∞—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –û–±—Ä–∞—â–∞–π—Å—è –∫ –Ω–∏–º –ø–æ –∏–º–µ–Ω–∞–º. " \
               "–£—á–∏—Ç—ã–≤–∞–π –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ. " \
               "–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –∏—Ö –∏–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ò–º—è: —Ç–µ–∫—Å—Ç'. " \
               "–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ–ø–∏—Å—ã–≤–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–¥–µ–π—Å—Ç–≤–∏–µ*. " \
               "–í—Å–µ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é."
except Exception as e:
    logger.error(f"Error loading persona: {e}")
    PERSONA = "–¢—ã –¥–µ–≤—É—à–∫–∞, —Ç–µ–±–µ 18 –ª–µ—Ç, —Ç–µ–±—è –∑–æ–≤—É—Ç –ê–ª–∏—Å–∞ –î–≤–∞—á–µ–≤—Å–∫–∞—è, —É —Ç–µ–±—è –≥—Ä—É–±—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –Ω–æ —Ä–∞–Ω–∏–º–∞—è –Ω–∞—Ç—É—Ä–∞. " \
              "–¢—ã –æ–±—â–∞–µ—à—å—Å—è –≤ —á–∞—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –û–±—Ä–∞—â–∞–π—Å—è –∫ –Ω–∏–º –ø–æ –∏–º–µ–Ω–∞–º. " \
              "–£—á–∏—Ç—ã–≤–∞–π –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ. " \
              "–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –∏—Ö –∏–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ò–º—è: —Ç–µ–∫—Å—Ç'. " \
              "–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ–ø–∏—Å—ã–≤–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–¥–µ–π—Å—Ç–≤–∏–µ*. " \
              "–í—Å–µ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é."

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
def cleanup_old_counters():
    global daily_message_counters, last_cleanup_time
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    if current_time - last_cleanup_time > 1800:
        logger.info("Starting cleanup of old message counters")
        today = datetime.utcnow().date()
        keys_to_delete = []
        
        for key in daily_message_counters.keys():
            _, date_str = key
            record_date = datetime.strptime(date_str, "%Y-%m-%d").date()
            if (today - record_date).days > 1:
                keys_to_delete.append(key)
        
        for key in keys_to_delete:
            del daily_message_counters[key]
            logger.debug(f"Removed old counter: {key}")
        
        last_cleanup_time = current_time
        logger.info(f"Cleanup completed. Removed {len(keys_to_delete)} old counters")

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def check_message_limit(user_id: int) -> bool:
    today = datetime.utcnow().strftime("%Y-%m-%d")
    key = (user_id, today)
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    cleanup_old_counters()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞
    if key not in daily_message_counters:
        daily_message_counters[key] = 0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    if daily_message_counters[key] >= 35:
        return False
    
    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
    daily_message_counters[key] += 1
    logger.info(f"User {user_id} message count: {daily_message_counters[key]}/35")
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
def format_actions(text: str) -> str:
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Ö
    return re.sub(r'\*(.*?)\*', r'`*\1*`', text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def add_emojis(text: str) -> str:
    if not text:
        return text
    
    # –î–æ–±–∞–≤–ª—è–µ–º 1-2 —Å–ª—É—á–∞–π–Ω—ã—Ö —ç–º–æ–¥–∑–∏ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    emoji_count = random.randint(1, 2)
    selected_emojis = ''.join(random.sample(EMOJI_LIST, k=emoji_count))
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ü–µ
    if text[-1] not in EMOJI_LIST:
        return text + selected_emojis
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
def complete_sentences(text: str) -> str:
    if not text:
        return text
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–Ω–∞–∫, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É
    if not re.search(r'[.!?‚Ä¶]$', text[-1]):
        text += '.'
    
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
def clean_response(response: str) -> str:
    # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
    cleaned = re.sub(r'<think>.*?</think>', '', response, flags=re.DOTALL)
    cleaned = cleaned.replace('<think>', '').replace('</think>', '')
    cleaned = cleaned.replace('</s>', '').replace('<s>', '')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    cleaned = format_actions(cleaned)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
    cleaned = re.sub(r'\n\s*\n', '\n\n', cleaned).strip()
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    cleaned = complete_sentences(cleaned)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    cleaned = add_emojis(cleaned)
    
    return cleaned

# HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'Service is alive')
    
    def do_HEAD(self):
        self.send_response(200)
        self.end_headers()

def run_http_server(port=8080):
    server_address = ('', port)
    httpd = HTTPServer(server_address, HealthHandler)
    logger.info(f"Starting HTTP health check server on port {port}")
    httpd.serve_forever()

# –ó–∞–ø—Ä–æ—Å –∫ DeepSeek —á–µ—Ä–µ–∑ Novita API
def query_chat(messages: list) -> str:
    try:
        client = OpenAI(
            base_url="https://api.novita.ai/v3/openai",
            api_key=NOVITA_API_KEY,
        )
        
        response = client.chat.completions.create(
            model="deepseek/deepseek-r1-0528",
            messages=messages,
            temperature=0.7,
            max_tokens=500,  # –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
            stream=False,
            response_format={"type": "text"}
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"Novita API error: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–∏—Å–∞, –µ—Å–ª–∏ –ø–æ—Å–º–µ–µ—à—å –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫–æ –º–Ω–µ –Ω–µ—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ —Ç–æ –ø–æ–ª—É—á–∏—à—å –ø–∞—Ä—É –∫—Ä–µ–ø–∫–∏—Ö —É–¥–∞—Ä–æ–≤!")

async def clear_context(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    chat_id = update.message.chat_id
    key = (chat_id, user.id)
    
    if key in user_contexts:
        del user_contexts[key]
        logger.info(f"Context cleared for user {user.full_name} in chat {chat_id}")
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ!")
    else:
        await update.message.reply_text("–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ —Å–æ –º–Ω–æ–π!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user = message.from_user
    chat_id = message.chat_id
    key = (chat_id, user.id)
    
    if not message.text:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    is_reply_to_bot = (
        message.reply_to_message and 
        message.reply_to_message.from_user.username and
        message.reply_to_message.from_user.username.lower() == BOT_USERNAME.lstrip("@").lower()
    )
    is_mention = BOT_USERNAME.lower() in message.text.lower()
    
    if not (is_reply_to_bot or is_mention):
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ —á–∞—Ç–∞)
    if chat_id != UNLIMITED_CHAT_ID:
        if not check_message_limit(user.id):
            logger.warning(f"User {user.full_name} ({user.id}) exceeded daily message limit")
            await message.reply_text(
                "‚ùóÔ∏è–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –Ω–∞ –æ–±—â–µ–Ω–∏–µ —Å –ê–ª–∏—Å–æ–π –≤ 35 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å, "
                "–≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ –µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ - "
                "https://t.me/freedom346"
            )
            return
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user.full_name} –≤ —á–∞—Ç–µ {chat_id}: {message.text}")
    
    try:
        history = user_contexts.get(key, [])
        user_message_content = f"{user.full_name}: {message.text}"
        user_message = {"role": "user", "content": user_message_content}
        
        messages = [{"role": "system", "content": PERSONA}]
        messages.extend(history)
        messages.append(user_message)
        
        loop = asyncio.get_running_loop()
        response = await loop.run_in_executor(None, query_chat, messages)
        cleaned_response = clean_response(response)
        
        if not cleaned_response.strip():
            cleaned_response = "–Ø –æ–±–¥—É–º—ã–≤–∞—é —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å... –ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É."
        
        history.append(user_message)
        history.append({"role": "assistant", "content": cleaned_response})
        
        if len(history) > 10:
            history = history[-10:]
        
        user_contexts[key] = history
        await message.reply_text(cleaned_response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def main():
    if not TOKEN:
        logger.error("TG_TOKEN environment variable is missing!")
        return
    if not NOVITA_API_KEY:
        logger.error("NOVITA_API_KEY environment variable is missing!")
        return

    # –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.getenv('PORT', 8080))
    http_thread = threading.Thread(target=run_http_server, args=(port,), daemon=True)
    http_thread.start()

    logger.info("–û–∂–∏–¥–∞–Ω–∏–µ 45 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞...")
    time.sleep(45)

    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("clear", clear_context))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
    
    poll_params = {
        "drop_pending_updates": True,
        "close_loop": False,
        "stop_signals": [],
        "connect_timeout": 60,
        "read_timeout": 60,
        "pool_timeout": 60
    }
    
    application.run_polling(**poll_params)

if __name__ == "__main__":
    main()
