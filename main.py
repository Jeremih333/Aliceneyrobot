import os
import logging
import asyncio
import threading
import time
import re
import random
from datetime import datetime, timedelta
from http.server import BaseHTTPRequestHandler, HTTPServer
from openai import OpenAI
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    BotCommand
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TOKEN = os.getenv("TG_TOKEN")
NOVITA_API_KEY = os.getenv("NOVITA_API_KEY")
BOT_USERNAME = "@aliceneyrobot"

# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
DEVELOPER_ID = 1040929628

# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
UNLIMITED_CHAT_ID = -1001481824277

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_contexts = {}
daily_message_counters = {}  # –§–æ—Ä–º–∞—Ç: {(user_id, date): count}
unlimited_users = {}  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–µ–∑–ª–∏–º–∏—Ç–æ–º: {user_id: date}
last_cleanup_time = time.time()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
SELECT_USER, SELECT_ACTION, INPUT_AMOUNT = range(3)

# –°–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
EMOJI_LIST = ["üòä", "üòÇ", "üòç", "ü§î", "üòé", "üëç", "‚ù§Ô∏è", "‚ú®", "üéâ", "üíî"]

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
try:
    with open("persona.txt", "r", encoding="utf-8") as f:
        PERSONA = f.read().strip()
    PERSONA += "\n\n–¢—ã –æ–±—â–∞–µ—à—å—Å—è –≤ —á–∞—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –û–±—Ä–∞—â–∞–π—Å—è –∫ –Ω–∏–º –ø–æ –∏–º–µ–Ω–∞–º. " \
               "–£—á–∏—Ç—ã–≤–∞–π –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ. " \
               "–í—Å–µ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é. " \
               "–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —Å –∞–±–∑–∞—Ü–∞–º–∏ –∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ."
except Exception as e:
    logger.error(f"Error loading persona: {e}")
    PERSONA = "–¢—ã –¥–µ–≤—É—à–∫–∞, —Ç–µ–±–µ 18 –ª–µ—Ç, —Ç–µ–±—è –∑–æ–≤—É—Ç –ê–ª–∏—Å–∞ –î–≤–∞—á–µ–≤—Å–∫–∞—è, —É —Ç–µ–±—è –≥—Ä—É–±—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –Ω–æ —Ä–∞–Ω–∏–º–∞—è –Ω–∞—Ç—É—Ä–∞. " \
              "–¢—ã –æ–±—â–∞–µ—à—å—Å—è –≤ —á–∞—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –û–±—Ä–∞—â–∞–π—Å—è –∫ –Ω–∏–º –∏–Ω–æ–≥–¥–∞ –ø–æ –∏–º–µ–Ω–∞–º. " \
              "–£—á–∏—Ç—ã–≤–∞–π –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ. " \
              "–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –∏—Ö –∏–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ò–º—è: —Ç–µ–∫—Å—Ç'. " \
              "–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ–ø–∏—Å—ã–≤–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–¥–µ–π—Å—Ç–≤–∏–µ*. " \
              "–í—Å–µ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é. " \
              "–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —Å –∞–±–∑–∞—Ü–∞–º–∏ –∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ."

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
def cleanup_old_counters():
    global daily_message_counters, unlimited_users, last_cleanup_time
    current_time = time.time()
    today = datetime.utcnow().date()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    if current_time - last_cleanup_time > 1800:
        logger.info("Starting cleanup of old data")
        keys_to_delete = []
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        for key in daily_message_counters.keys():
            _, date_str = key
            record_date = datetime.strptime(date_str, "%Y-%m-%d").date()
            if (today - record_date).days > 1:
                keys_to_delete.append(key)
        
        for key in keys_to_delete:
            del daily_message_counters[key]
            logger.debug(f"Removed old counter: {key}")
        
        # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        users_to_remove = []
        for user_id, unlimited_date in unlimited_users.items():
            if (today - unlimited_date).days > 0:
                users_to_remove.append(user_id)
        
        for user_id in users_to_remove:
            del unlimited_users[user_id]
            logger.debug(f"Removed unlimited status for user: {user_id}")
        
        last_cleanup_time = current_time
        logger.info(f"Cleanup completed. Removed {len(keys_to_delete)} old counters and {len(users_to_remove)} unlimited users")

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def check_message_limit(user_id: int) -> bool:
    today = datetime.utcnow().strftime("%Y-%m-%d")
    key = (user_id, today)
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    cleanup_old_counters()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    if user_id in unlimited_users:
        return True
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞
    if key not in daily_message_counters:
        daily_message_counters[key] = 0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    if daily_message_counters[key] >= 35:
        return False
    
    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
    daily_message_counters[key] += 1
    logger.info(f"User {user_id} message count: {daily_message_counters[key]}/35")
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π (–±–µ–∑ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫)
def format_actions(text: str) -> str:
    # –ü—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–¥–µ–π—Å—Ç–≤–∏–µ*
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ (—Ä–µ–∂–µ –∏ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ)
def add_emojis(text: str) -> str:
    if not text:
        return text
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ç–æ–ª—å–∫–æ –≤ 20% —Å–ª—É—á–∞–µ–≤
    if random.random() < 0.2:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 1 —ç–º–æ–¥–∑–∏
        selected_emoji = random.choice(EMOJI_LIST)
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤ –∫–æ–Ω—Ü–µ –Ω–µ—Ç —ç–º–æ–¥–∑–∏
        if text[-1] not in EMOJI_LIST:
            return text + selected_emoji
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
def complete_sentences(text: str) -> str:
    if not text:
        return text
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–Ω–∞–∫, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É
    if not re.search(r'[.!?‚Ä¶]$', text):
        text += '.'
    
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–±–∑–∞—Ü–µ–≤
def format_paragraphs(text: str) -> str:
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã –ø–æ –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫
    paragraphs = text.split('\n\n')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∞–±–∑–∞—Ü —Å –æ—Ç—Å—Ç—É–ø–æ–º
    formatted = []
    for paragraph in paragraphs:
        if paragraph.strip():
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            cleaned = re.sub(r'\s+', ' ', paragraph).strip()
            # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É (4 –ø—Ä–æ–±–µ–ª–∞ –≤ –Ω–∞—á–∞–ª–µ)
            formatted.append(f"    {cleaned}")
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Å –¥–≤–æ–π–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
    return '\n\n'.join(formatted)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
def clean_response(response: str) -> str:
    # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
    cleaned = re.sub(r'<think>.*?</think>', '', response, flags=re.DOTALL)
    cleaned = cleaned.replace('<think>', '').replace('</think>', '')
    cleaned = cleaned.replace('</s>', '').replace('<s>', '')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è (–±–µ–∑ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫)
    cleaned = format_actions(cleaned)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
    cleaned = re.sub(r'\n\s*\n', '\n\n', cleaned).strip()
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    cleaned = complete_sentences(cleaned)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–±–∑–∞—Ü—ã
    cleaned = format_paragraphs(cleaned)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–µ–∂–µ)
    cleaned = add_emojis(cleaned)
    
    return cleaned

# HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'Service is alive')
    
    def do_HEAD(self):
        self.send_response(200)
        self.end_headers()

def run_http_server(port=8080):
    server_address = ('', port)
    httpd = HTTPServer(server_address, HealthHandler)
    logger.info(f"Starting HTTP health check server on port {port}")
    httpd.serve_forever()

# –ó–∞–ø—Ä–æ—Å –∫ DeepSeek —á–µ—Ä–µ–∑ Novita API
def query_chat(messages: list) -> str:
    try:
        client = OpenAI(
            base_url="https://api.novita.ai/v3/openai",
            api_key=NOVITA_API_KEY,
        )
        
        response = client.chat.completions.create(
            model="deepseek/deepseek-r1-0528",
            messages=messages,
            temperature=0.7,
            max_tokens=600,  # –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            stream=False,
            response_format={"type": "text"}
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"Novita API error: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–∏—Å–∞, –µ—Å–ª–∏ –ø–æ—Å–º–µ–µ—à—å –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫–æ –º–Ω–µ –Ω–µ—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ —Ç–æ –ø–æ–ª—É—á–∏—à—å –ø–∞—Ä—É –∫—Ä–µ–ø–∫–∏—Ö —É–¥–∞—Ä–æ–≤!\n\n"
        "/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ –∏ –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ –º–Ω–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è.\n"
        "/stat - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è"
    )

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π"""
    keyboard = [
        [InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", url="https://telegra.ph/Ob-Alise-Dvachevskoj-07-09")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚ùóÔ∏è–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.",
        reply_markup=reply_markup
    )

async def clear_context(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    chat_id = update.message.chat_id
    key = (chat_id, user.id)
    
    if key in user_contexts:
        del user_contexts[key]
        logger.info(f"Context cleared for user {user.full_name} in chat {chat_id}")
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ!")
    else:
        await update.message.reply_text("–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ —Å–æ –º–Ω–æ–π!")

async def stat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stat - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.message.from_user
    today = datetime.utcnow().strftime("%Y-%m-%d")
    key = (user.id, today)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    has_context = False
    for ctx_key in user_contexts.keys():
        if ctx_key[1] == user.id:  # –ò—â–µ–º –ø–æ user_id
            has_context = True
            break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    if user.id in unlimited_users:
        remaining_text = "‚ôæÔ∏è"
    else:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        used_messages = daily_message_counters.get(key, 0)
        remaining = max(0, 35 - used_messages)
        remaining_text = f"{remaining}/35"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"üìä <b>–í–∞—à —Å—Ç–∞—Ç—É—Å:</b>\n\n"
        f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: <b>{remaining_text}</b>\n"
        f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞: {'—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞' if has_context else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
        f"üí° –î–ª—è —Å–±—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /clear"
    )
    
    await update.message.reply_text(message, parse_mode="HTML")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
def get_user_stat(user_id: int) -> str:
    today = datetime.utcnow().strftime("%Y-%m-%d")
    key = (user_id, today)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    if user_id in unlimited_users:
        remaining_text = "‚ôæÔ∏è"
    else:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        used_messages = daily_message_counters.get(key, 0)
        remaining = max(0, 35 - used_messages)
        remaining_text = f"{remaining}/35"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    has_context = any(ctx_key[1] == user_id for ctx_key in user_contexts.keys())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    return (
        f"üë§ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}:</b>\n\n"
        f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: <b>{remaining_text}</b>\n"
        f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞: {'—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞' if has_context else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dev (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)
async def dev(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    user = update.message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
    if user.id != DEVELOPER_ID:
        logger.warning(f"User {user.id} tried to access dev command")
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.message.reply_text(
        "üîß <b>–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å:",
        parse_mode="HTML"
    )
    
    return SELECT_USER

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def select_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —á–∏—Å–ª–æ–º
    if not user_input.isdigit():
        await update.message.reply_text("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return SELECT_USER
    
    user_id = int(user_input)
    context.user_data['target_user_id'] = user_id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_stat = get_user_stat(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="add_messages")],
        [InlineKeyboardButton("‚ûñ –£–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="remove_messages")],
        [InlineKeyboardButton("‚ôæÔ∏è –í–∫–ª—é—á–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç", callback_data="set_unlimited")],
        [InlineKeyboardButton("üö´ –í—ã–∫–ª—é—á–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç", callback_data="remove_unlimited")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"{user_stat}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )
    
    return SELECT_ACTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
async def select_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    action = query.data
    context.user_data['action'] = action
    
    # –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
    if action in ["set_unlimited", "remove_unlimited"]:
        target_user_id = context.user_data['target_user_id']
        today = datetime.utcnow().date()
        
        if action == "set_unlimited":
            unlimited_users[target_user_id] = today
            action_result = "–±–µ–∑–ª–∏–º–∏—Ç –≤–∫–ª—é—á–µ–Ω ‚ôæÔ∏è"
        else:
            if target_user_id in unlimited_users:
                del unlimited_users[target_user_id]
                action_result = "–±–µ–∑–ª–∏–º–∏—Ç –≤—ã–∫–ª—é—á–µ–Ω üö´"
            else:
                action_result = "–±–µ–∑–ª–∏–º–∏—Ç —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω üö´"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = (
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ!\n\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {target_user_id}\n"
            f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ: {action_result}\n\n"
            f"{get_user_stat(target_user_id)}"
        )
        
        await query.edit_message_text(report, parse_mode="HTML")
        return ConversationHandler.END
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    action_text = "–¥–æ–±–∞–≤–∏—Ç—å" if action == "add_messages" else "—É–±—Ä–∞—Ç—å"
    
    await query.edit_message_text(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {action_text} –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ‚ôæÔ∏è –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞:"
    )
    
    return INPUT_AMOUNT

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def input_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    target_user_id = context.user_data['target_user_id']
    action = context.user_data['action']
    today = datetime.utcnow().strftime("%Y-%m-%d")
    key = (target_user_id, today)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —ç–º–æ–¥–∑–∏
    if user_input == "‚ôæÔ∏è":
        # –í–∫–ª—é—á–∞–µ–º –±–µ–∑–ª–∏–º–∏—Ç
        unlimited_users[target_user_id] = datetime.utcnow().date()
        action_result = "–±–µ–∑–ª–∏–º–∏—Ç –≤–∫–ª—é—á–µ–Ω ‚ôæÔ∏è"
    elif user_input == "üö´":
        # –í—ã–∫–ª—é—á–∞–µ–º –±–µ–∑–ª–∏–º–∏—Ç
        if target_user_id in unlimited_users:
            del unlimited_users[target_user_id]
            action_result = "–±–µ–∑–ª–∏–º–∏—Ç –≤—ã–∫–ª—é—á–µ–Ω üö´"
        else:
            action_result = "–±–µ–∑–ª–∏–º–∏—Ç —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω üö´"
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        if not user_input.isdigit():
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ —ç–º–æ–¥–∑–∏ ‚ôæÔ∏è/üö´. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return INPUT_AMOUNT
        
        amount = int(user_input)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if key not in daily_message_counters:
            daily_message_counters[key] = 0
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if action == "add_messages":
            daily_message_counters[key] = max(0, daily_message_counters[key] - amount)
            action_result = f"–¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} —Å–æ–æ–±—â–µ–Ω–∏–π"
        else:
            daily_message_counters[key] += amount
            action_result = f"—É–±—Ä–∞–Ω–æ {amount} —Å–æ–æ–±—â–µ–Ω–∏–π"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = (
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ!\n\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {target_user_id}\n"
        f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ: {action_result}\n\n"
        f"{get_user_stat(target_user_id)}"
    )
    
    await update.message.reply_text(report, parse_mode="HTML")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
async def cancel_dev(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user = message.from_user
    chat_id = message.chat_id
    key = (chat_id, user.id)
    
    if not message.text:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
    is_reply_to_bot = (
        message.reply_to_message and 
        message.reply_to_message.from_user.username and
        message.reply_to_message.from_user.username.lower() == BOT_USERNAME.lstrip("@").lower()
    )
    is_mention = BOT_USERNAME.lower() in message.text.lower()
    
    # –î–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.chat.type != "private":
        if not (is_reply_to_bot or is_mention):
            return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ —á–∞—Ç–∞)
    if chat_id != UNLIMITED_CHAT_ID:
        if not check_message_limit(user.id):
            logger.warning(f"User {user.full_name} ({user.id}) exceeded daily message limit")
            await message.reply_text(
                "‚ùóÔ∏è–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –Ω–∞ –æ–±—â–µ–Ω–∏–µ —Å –ê–ª–∏—Å–æ–π –≤ 35 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å, "
                "–≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ –µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ - "
                "https://t.me/freedom346"
            )
            return
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user.full_name} –≤ —á–∞—Ç–µ {chat_id}: {message.text}")
    
    try:
        history = user_contexts.get(key, [])
        user_message_content = f"{user.full_name}: {message.text}"
        user_message = {"role": "user", "content": user_message_content}
        
        messages = [{"role": "system", "content": PERSONA}]
        messages.extend(history)
        messages.append(user_message)
        
        loop = asyncio.get_running_loop()
        response = await loop.run_in_executor(None, query_chat, messages)
        cleaned_response = clean_response(response)
        
        if not cleaned_response.strip():
            cleaned_response = "–Ø –æ–±–¥—É–º—ã–≤–∞—é —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å... –ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É."
        
        history.append(user_message)
        history.append({"role": "assistant", "content": cleaned_response})
        
        if len(history) > 10:
            history = history[-10:]
        
        user_contexts[key] = history
        await message.reply_text(cleaned_response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def post_init(application: Application) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    commands = [
        BotCommand("start", "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"),
        BotCommand("info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"),
        BotCommand("clear", "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"),
        BotCommand("stat", "–°—Ç–∞—Ç—É—Å –∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è")
    ]
    await application.bot.set_my_commands(commands)
    logger.info("–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

def main():
    if not TOKEN:
        logger.error("TG_TOKEN environment variable is missing!")
        return
    if not NOVITA_API_KEY:
        logger.error("NOVITA_API_KEY environment variable is missing!")
        return

    # –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.getenv('PORT', 8080))
    http_thread = threading.Thread(target=run_http_server, args=(port,), daemon=True)
    http_thread.start()

    logger.info("–û–∂–∏–¥–∞–Ω–∏–µ 45 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞...")
    time.sleep(45)

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º post_init
    application = Application.builder().token(TOKEN).post_init(post_init).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("info", info))
    application.add_handler(CommandHandler("clear", clear_context))
    application.add_handler(CommandHandler("stat", stat))
    
    # –°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    dev_handler = ConversationHandler(
        entry_points=[CommandHandler("dev", dev)],
        states={
            SELECT_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_user)],
            SELECT_ACTION: [CallbackQueryHandler(select_action)],
            INPUT_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_amount)]
        },
        fallbacks=[CommandHandler("cancel", cancel_dev)],
        allow_reentry=True
    )
    application.add_handler(dev_handler)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
    
    poll_params = {
        "drop_pending_updates": True,
        "close_loop": False,
        "stop_signals": [],
        "connect_timeout": 60,
        "read_timeout": 60,
        "pool_timeout": 60
    }
    
    application.run_polling(**poll_params)

if __name__ == "__main__":
    main()
